"use client"
import { useEffect, useState } from "react";
import { useSession } from "next-auth/react";
import toast from "react-hot-toast";

const PushManager = () => {
  const { data: session } = useSession();
  const [notificationState, setNotificationState] = useState<string>("checking");
  const publicVapidKey = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY;

  useEffect(() => {
    // Solo intentar suscribir si hay sesi√≥n
    if (!session?.user) return;

    const subscribeUser = async () => {
      if ("serviceWorker" in navigator && "PushManager" in window) {
        try {
          setNotificationState("requesting");
          
          // Registro del Service Worker
          const registration = await navigator.serviceWorker.register("/worker.js");
          console.log("üì± Service Worker registrado:", registration);

          // Esperar a que el Service Worker est√© listo
          const readyRegistration = await navigator.serviceWorker.ready;
          console.log("üì± Service Worker listo:", readyRegistration);

          // Verificar si ya est√° suscrito
          const existingSubscription = await readyRegistration.pushManager.getSubscription();
          if (existingSubscription) {
            console.log("üì± Ya existe suscripci√≥n push");
            setNotificationState("subscribed");
            return;
          }

          // Solicitar permiso para notificaciones
          const permission = await Notification.requestPermission();
          if (permission !== "granted") {
            console.warn("‚ùå Permiso para notificaciones denegado");
            setNotificationState("denied");
            toast("‚ÑπÔ∏è Puedes activar notificaciones m√°s tarde en configuraci√≥n del navegador", {
              duration: 5000,
              icon: "‚ÑπÔ∏è"
            });
            return;
          }
          console.log("‚úÖ Permiso para notificaciones otorgado");

          // Suscripci√≥n al PushManager
          const subscription = await readyRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: publicVapidKey,
          });
          console.log("üì± Usuario suscrito a push:", subscription);

          // Enviar la suscripci√≥n al backend
          const response = await fetch("/api/save-subscription", {
            method: "POST",
            body: JSON.stringify(subscription),
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (response.ok) {
            console.log("‚úÖ Suscripci√≥n guardada en el backend");
            setNotificationState("subscribed");
            toast.success("üì± ¬°Notificaciones activadas! Recibir√°s alertas importantes");
          } else {
            console.error("‚ùå Error guardando suscripci√≥n:", await response.text());
            setNotificationState("error");
            toast.error("‚ùå Error activando notificaciones");
          }
        } catch (error) {
          console.error("‚ùå Error al habilitar notificaciones:", error);
          setNotificationState("error");
        }
      } else {
        console.warn("‚ùå Push notifications no soportadas en este dispositivo");
        setNotificationState("unsupported");
      }
    };

    subscribeUser();
  }, [session, publicVapidKey]);

  return null;
};

export default PushManager;
